
## a1ad85c2ed06111be5186d68e17cdb98dc3ea400

name: Craftista Multi-Stage Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
    paths:
      - 'frontend/**'
      - 'catalogue/**'
      - 'voting/**'
      - 'recommendation/**'
      - '*'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_services: ${{ steps.changes.outputs.services }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend: 
              - 'frontend/**'
            catalogue: 
              - 'catalogue/**'
            voting: 
              - 'voting/**'
            recommendation: 
              - 'recommendation/**'

      - name: Set Changed Services Output
        id: set-changes
        run: |
          CHANGED=()
          [[ "${{ steps.changes.outputs.frontend }}" == "true" ]] && CHANGED+=("frontend")
          [[ "${{ steps.changes.outputs.catalogue }}" == "true" ]] && CHANGED+=("catalogue")
          [[ "${{ steps.changes.outputs.voting }}" == "true" ]] && CHANGED+=("voting")
          [[ "${{ steps.changes.outputs.recommendation }}" == "true" ]] && CHANGED+=("recommendation")
          echo "services=$(IFS=,; echo "${CHANGED[*]}")" >> $GITHUB_ENV
        shell: bash

  validate:
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, catalogue, voting, recommendation]
    if: contains(needs.detect-changes.outputs.changed_services, matrix.service)
    steps:
      - uses: actions/checkout@v4

      - name: Setup Environment
        run: |
          case "${{ matrix.service }}" in
            "frontend") echo "SETUP=node" >> $GITHUB_ENV ;;
            "catalogue") echo "SETUP=python" >> $GITHUB_ENV ;;
            "voting") echo "SETUP=java" >> $GITHUB_ENV ;;
            "recommendation") echo "SETUP=go" >> $GITHUB_ENV ;;
          esac

      - name: Install Dependencies & Run Tests
        run: |
          case "${{ matrix.service }}" in
            "frontend") npm ci && npm run lint && npm run test:coverage ;;
            "catalogue") pip install -r requirements.txt && pytest --cov=. ;;
            "voting") mvn -B verify ;;
            "recommendation") go mod download ;;
          esac

      - name: SonarCloud Analysis
        uses: SonarSource/sonarqube-scan-action@v4
        with:
          projectBaseDir: ${{ matrix.service }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  push_to_docker_register:
    runs-on: ubuntu-latest
    needs: [detect-changes, validate]
    if: |
      github.event.pull_request.base.ref == 'main' &&
      github.event.pull_request.head.ref == 'pipeline/gha' &&
      (needs.validate.result == 'success' || needs.validate.result == 'skipped')
    strategy:
      matrix:
        service: [frontend, catalogue, recommendation, voting]
    if: contains(needs.detect-changes.outputs.changed_services, matrix.service)
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push ${{ matrix.service }}
        id: docker_push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/craftista-${{ matrix.service }}:latest
            ${{ secrets.DOCKER_USERNAME }}/craftista-${{ matrix.service }}:${{ github.sha }}

      - name: Record Push Status
        run: echo "${{ matrix.service }}_pushed=${{ steps.docker_push.outcome == 'success' }}" >> $GITHUB_ENV

  rollback:
    needs: push_to_docker_register
    if: ${{ needs.push_to_docker_register.result == 'failure' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, catalogue, recommendation, voting]
    if: contains(needs.detect-changes.outputs.changed_services, matrix.service)
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Rollback ${{ matrix.service }}
        run: |
          echo "Rolling back ${{ matrix.service }}..."
          LAST_IMAGE=$(docker images ${{ secrets.DOCKER_USERNAME }}/craftista-${{ matrix.service }} --format "{{.Tag}}" | head -n 2 | tail -n 1)
          docker tag ${{ secrets.DOCKER_USERNAME }}/craftista-${{ matrix.service }}:$LAST_IMAGE ${{ secrets.DOCKER_USERNAME }}/craftista-${{ matrix.service }}:rollback
          docker push ${{ secrets.DOCKER_USERNAME }}/craftista-${{ matrix.service }}:rollback
          echo "Rolled back ${{ matrix.service }} to $LAST_IMAGE"