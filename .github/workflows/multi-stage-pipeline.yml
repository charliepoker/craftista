
## a1ad85c2ed06111be5186d68e17cdb98dc3ea400



name: Craftista Multi-Stage Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
    paths:
      - 'frontend/**'
      - 'catalogue/**'
      - 'voting/**'
      - 'recommendation/**'
      - '*'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      catalogue: ${{ steps.changes.outputs.catalogue }}
      voting: ${{ steps.changes.outputs.voting }}
      recommendation: ${{ steps.changes.outputs.recommendation }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            catalogue:
              - 'catalogue/**'
            voting:
              - 'voting/**'
            recommendation:
              - 'recommendation/**'
            docker:
              - 'docker-compose.yml'

      - name: Debug Changes
        run: |
          echo "Frontend changes: ${{ steps.changes.outputs.frontend }}"
          echo "Catalogue changes: ${{ steps.changes.outputs.catalogue }}"
          echo "Voting changes: ${{ steps.changes.outputs.voting }}"
          echo "Recommendation changes: ${{ steps.changes.outputs.recommendation }}"

        

  validate-frontend:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Lint
        run: npm run lint || true  # Ensures linting errors don't break pipeline

      - name: Run unit tests
        run: npm run test:coverage

      - name: SonarCloud Analysis
        uses: SonarSource/sonarqube-scan-action@v4
        with:
          projectBaseDir: frontend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  validate-catalogue:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.catalogue == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: catalogue
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: catalogue/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest pytest-cov bandit safety

      - name: Run unit tests with coverage
        run: pytest --cov=. --cov-report=xml

      - name: SonarCloud Analysis
        uses: SonarSource/sonarqube-scan-action@v4
        with:
          projectBaseDir: catalogue
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  validate-recommendation:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.recommendation == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: recommendation
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache-dependency-path: recommendation/go.sum

      - name: Install dependencies
        run: go mod download

      - name: SonarCloud Analysis
        uses: SonarSource/sonarqube-scan-action@v4
        with:
          projectBaseDir: recommendation
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  validate-voting:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.voting == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: voting
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build and test
        run: mvn -B verify

      - name: SonarCloud Analysis
        run: mvn sonar:sonar
        working-directory: voting
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  push_to_docker_register:
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-frontend, validate-catalogue, validate-recommendation, validate-voting]
    if: |
      github.event_name == 'pull_request' &&
      github.event.pull_request.base.ref == 'main' &&
      github.event.pull_request.head.ref == 'pipeline/gha'
    strategy:
      matrix:
        service: [frontend, catalogue, recommendation, voting]
    steps:
      - uses: actions/checkout@v4

      - name: Debug Conditions
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "PR Base: ${{ github.event.pull_request.base.ref }}"
          echo "PR Head: ${{ github.event.pull_request.head.ref }}"
          echo "Service: ${{ matrix.service }}"
          echo "Validation result: ${{ needs[format('validate-{0}', matrix.service)].result }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push ${{ matrix.service }}
        id: docker_push
        if: |
          needs.detect-changes.outputs[matrix.service] == 'true' &&
          needs[format('validate-{0}', matrix.service)].result == 'success'
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/craftista-${{ matrix.service }}:latest
            ${{ secrets.DOCKER_USERNAME }}/craftista-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/craftista-${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/craftista-${{ matrix.service }}:buildcache,mode=max

      - name: Record Push Status
        id: record_push
        run: |
          echo "${{ matrix.service }}_pushed=${{ steps.docker_push.outcome == 'success' }}" >> $GITHUB_ENV

  rollback:
    needs: push_to_docker_register
    if: failure()  # Only runs if push_to_docker_register fails
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, catalogue, recommendation, voting]
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Rollback ${{ matrix.service }}
        if: env[format('{0}_pushed', matrix.service)] != 'true'  # Rollback only if push failed
        run: |
          echo "Rolling back ${{ matrix.service }}..."
          LAST_IMAGE=$(docker images ${{ secrets.DOCKER_USERNAME }}/craftista-${{ matrix.service }} --format "{{.Tag}}" | head -n 2 | tail -n 1)
          docker tag ${{ secrets.DOCKER_USERNAME }}/craftista-${{ matrix.service }}:$LAST_IMAGE ${{ secrets.DOCKER_USERNAME }}/craftista-${{ matrix.service }}:rollback
          docker push ${{ secrets.DOCKER_USERNAME }}/craftista-${{ matrix.service }}:rollback
          echo "Rolled back ${{ matrix.service }} to $LAST_IMAGE"