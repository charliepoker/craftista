# name: Craftista Multi-Stage Pipeline

# on:
#   pull_request:
#     types: [opened, synchronize, reopened]
#     branches: [develop]
#     paths:
#       - "frontend/**"
#       - "catalogue/**"
#       - "voting/**"
#       - "recommendation/**"
#       - "*"
#   # push:
#   #   branches:
#   #     - develop
# env:
#   REGISTRY: docker.io
#   IMAGE_PREFIX: craftista # Directly use "craftista" as the prefix

# jobs:
#   detect-changes:
#     runs-on: ubuntu-latest
#     outputs:
#       frontend: ${{ steps.changes.outputs.frontend }}
#       catalogue: ${{ steps.changes.outputs.catalogue }}
#       recommendation: ${{ steps.changes.outputs.recommendation }}
#       voting: ${{ steps.changes.outputs.voting }}
#     steps:
#       - uses: actions/checkout@v4
#       - uses: dorny/paths-filter@v3
#         id: changes
#         with:
#           filters: |
#             frontend:
#               - 'frontend/**'
#             catalogue:
#               - 'catalogue/**'
#             recommendation:
#               - 'recommendation/**'
#             voting:
#               - 'voting/**'
#             docker:
#               - 'docker-compose.yml'

#       - name: Set Output
#         id: set-output
#         run: echo "changed_services=$(echo '${{ toJSON(steps.changes.outputs) }}' | jq -r 'keys[] | select(.!="docker")' | jq -sc '.')" >> $GITHUB_ENV

#   validate-frontend:
#     needs: detect-changes
#     if: ${{ needs.detect-changes.outputs.frontend == 'true' }}
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: frontend
#     steps:
#       - uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: "18"
#           cache: "npm"
#           cache-dependency-path: frontend/package-lock.json

#       - name: Install dependencies
#         run: npm ci --legacy-peer-deps

#       - name: Lint
#         run: npm run lint || true # Ensures linting errors don't break pipeline

#       - name: Run unit tests
#         run: npm run test:coverage

#       - name: SonarCloud Analysis
#         uses: SonarSource/sonarqube-scan-action@v4
#         with:
#           projectBaseDir: frontend
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

#   validate-catalogue:
#     needs: detect-changes
#     if: ${{ needs.detect-changes.outputs.catalogue == 'true' }}
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: catalogue
#     steps:
#       - uses: actions/checkout@v4

#       - name: Setup Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: "3.11"
#           cache: "pip"
#           cache-dependency-path: catalogue/requirements.txt

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt pytest pytest-cov bandit safety

#       - name: Run unit tests with coverage
#         run: pytest --cov=. --cov-report=xml

#       - name: SonarCloud Analysis
#         uses: SonarSource/sonarqube-scan-action@v4
#         with:
#           projectBaseDir: catalogue
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

#   validate-recommendation:
#     needs: detect-changes
#     if: ${{ needs.detect-changes.outputs.recommendation == 'true' }}
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: recommendation
#     steps:
#       - uses: actions/checkout@v4

#       - name: Setup Go
#         uses: actions/setup-go@v4
#         with:
#           go-version: "1.21"
#           cache-dependency-path: recommendation/go.sum

#       - name: Install dependencies
#         run: go mod download

#       - name: SonarCloud Analysis
#         uses: SonarSource/sonarqube-scan-action@v4
#         with:
#           projectBaseDir: recommendation
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

#   validate-voting:
#     needs: detect-changes
#     if: ${{ needs.detect-changes.outputs.voting == 'true' }}
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: voting
#     steps:
#       - uses: actions/checkout@v4

#       - name: Setup Java
#         uses: actions/setup-java@v4
#         with:
#           java-version: "17"
#           distribution: "temurin"
#           cache: "maven"

#       - name: Build and test
#         run: mvn -B verify

#       - name: SonarCloud Analysis
#         run: mvn sonar:sonar
#         working-directory: voting
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

#   build-and-push:
#     runs-on: ubuntu-latest
#     needs: detect-changes
#     strategy:
#       matrix:
#         service: [frontend, catalogue, recommendation, voting]
#     steps:
#       - name: Check if service has changed
#         run: |
#           if [[ "${{ contains(needs.detect-changes.outputs.changed_services, matrix.service) }}" == "true" ]]; then
#             echo "${{ matrix.service }} has changed"
#           else
#             echo "${{ matrix.service }} has not changed"
#             exit 0
#           fi

#       - uses: actions/checkout@v4

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and Push Docker Image
#         run: |
#           echo "Building and pushing ${{ matrix.service }}..."
#           docker build -t 8060633493/craftista-${{ matrix.service }}:latest ./${{ matrix.service }}
#           docker push 8060633493/craftista-${{ matrix.service }}:latest


name: Craftista Multi-Stage Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [develop]
    paths:
      - "frontend/**"
      - "catalogue/**"
      - "voting/**"
      - "recommendation/**"
      - "*"

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: craftista

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      catalogue: ${{ steps.changes.outputs.catalogue }}
      recommendation: ${{ steps.changes.outputs.recommendation }}
      voting: ${{ steps.changes.outputs.voting }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            catalogue:
              - 'catalogue/**'
            recommendation:
              - 'recommendation/**'
            voting:
              - 'voting/**'
            docker:
              - 'docker-compose.yml'

  validate-frontend:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      - name: Lint
        run: npm run lint || true
      - name: Run unit tests
        run: npm run test:coverage
      - name: SonarCloud Analysis
        uses: SonarSource/sonarqube-scan-action@v4
        with:
          projectBaseDir: frontend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  validate-catalogue:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.catalogue == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: catalogue
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: catalogue/requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest pytest-cov bandit safety
      - name: Run unit tests with coverage
        run: pytest --cov=. --cov-report=xml
      - name: SonarCloud Analysis
        uses: SonarSource/sonarqube-scan-action@v4
        with:
          projectBaseDir: catalogue
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  validate-recommendation:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.recommendation == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: recommendation
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache-dependency-path: recommendation/go.sum
      - name: Install dependencies
        run: go mod download
      - name: SonarCloud Analysis
        uses: SonarSource/sonarqube-scan-action@v4
        with:
          projectBaseDir: recommendation
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  validate-voting:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.voting == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: voting
    steps:
      - uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "maven"
      - name: Build and test
        run: mvn -B verify
      - name: SonarCloud Analysis
        run: mvn sonar:sonar
        working-directory: voting
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

   build-and-push-frontend:
    runs-on: ubuntu-latest
    needs: validate-frontend
    if: ${{ needs.detect-changes.outputs.frontend == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and Push Docker Image
        run: |
          echo "Building and pushing frontend..."
          docker build -t ${{ env.IMAGE_PREFIX }}-frontend:latest ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-frontend:latest

  build-and-push-catalogue:
    runs-on: ubuntu-latest
    needs: validate-catalogue
    if: ${{ needs.detect-changes.outputs.catalogue == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          echo "Building and pushing ${{ matrix.service }}..."
          docker build -t ${{ env.IMAGE_PREFIX }}-catalogue:latest ./catalogue
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-catalogue:latest

  build-and-push-recommendation:
    runs-on: ubuntu-latest
    needs: validate-recommendation
    if: ${{ needs.detect-changes.outputs.recommendation == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          echo "Building and pushing ${{ matrix.service }}..."
          docker build -t 8060633493/craftista-${{ matrix.service }}:latest ./${{ matrix.service }}
          docker push 8060633493/craftista-${{ matrix.service }}:latest

  build-and-push-voting:
    runs-on: ubuntu-latest
    needs: validate-voting
    if: ${{ needs.detect-changes.outputs.voting == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          echo "Building and pushing ${{ matrix.service }}..."
          docker build -t 8060633493/craftista-${{ matrix.service }}:latest ./${{ matrix.service }}
          docker push 8060633493/craftista-${{ matrix.service }}:latest



      


      